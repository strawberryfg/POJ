利用并查集优越的时空复杂度，我们可以实现LCA问题的O(n+Q)算法，这里Q表示询问

的次数。

Tarjan算法基于深度优先搜索的框架，对于新搜索到的一个结点，首先创建由这个结点

构成的集合，再对当前结点的每一个子树进行搜索，每搜索完一棵子树，则可确定子树

内的LCA询问都已解决。其他的LCA询问的结果必然在这个子树之外，这时把子树所形

成的集合与当前结点的集合合并，并将当前结点设为这个集合的祖先。之后继续搜索下

一棵子树，直到当前结点的所有子树搜索完。这时把当前结点也设为已被检查过的，同

时可以处理有关当前结点的LCA询问，如果有一个从当前结点到结点v的询问，且v已被

检查过，则由于进行的是深度优先搜索，当前结点与v的最近公共祖先一定还没有被检

查，而这个最近公共祖先的包涵v的子树一定已经搜索过了，那么这个最近公共祖先一定

是v所在集合的祖先。


下面给出这个算法的伪代码描述：

以下内容为程序代码:

LCA(u)   
{   
     Make-Set(u)   
     fa[u]=u   
     对于u的每一个孩子v   
     {   
         LCA(v)   
         fa[v]=u   
     }   
     checked[u]=true  
     对于每个(u,v)属于P   
     {   
         if checked[v]=true  
        then {   
             回答u和v的最近公共祖先为 ancestor[Find-Set(v)]   
         }   
     }   
}


不能使用按秩合并